%{
  #include "UDP.h"
  #include "tmctime.h"

  int status_stale = -1;
  double clo_mr = 0.;
  
  UDPcsv_file UDPcsv(38-2, "");
  bool UDPext_debug = false;

  void UDPinit() {
    UDPbcast *UDP = UDPext_debug ?
      new UDPbcast(0, "UDPext.log",1000) :
      new UDPbcast("10.9.1.255", "5100",1000); // ER-2 LAN
//    UDPbcast UDP("10.245.83.127", "5100"); // Link LAN
//    UDPbcast UDP("192.168.237.255", "5100"); // VMware private LAN
    UDPcsv.init(UDP, 1000);

    // column numbers are offset by 2 to account for:
    //   1-based documentation
    //   'DPOPS' string in first column
    //   ISO8601 time in second column
    UDPcsv.init_col(3-2,"Status","%.0lf");
    UDPcsv.init_col(4-2,"POPS_Part_num");
    UDPcsv.init_col(5-2,"POPS_num_cc");
    UDPcsv.init_col(6-2,"POPS_area");
    UDPcsv.init_col(7-2,"POPS_Flow");
    UDPcsv.init_col(8-2,"PMFC_MassFlow");
    UDPcsv.init_col(9-2,"BMFC_MassFlow");
    UDPcsv.init_col(10-2,"PMFC_P");
    UDPcsv.init_col(11-2,"BMFC_P");
    UDPcsv.init_col(12-2, "BPmpV");
    UDPcsv.init_col(13-2, "BPmpT");
    UDPcsv.init_col(14-2, "PPmpT");
    UDPcsv.init_col(15-2, "POPST");
    UDPcsv.init_col(16-2, "RPi_T");
    UDPcsv.init_col(17-2, "Amb_T");
    UDPcsv.init_col(18-2, "Rov3T");
    UDPcsv.init_col(19-2, "RingT");
    UDPcsv.init_col(20-2, "PD_Vel");
    UDPcsv.init_col(21-2, "PD_nccm");
    UDPcsv.init_col(22-2, "POPS_Bin01");
    UDPcsv.init_col(23-2, "POPS_Bin02");
    UDPcsv.init_col(24-2, "POPS_Bin03");
    UDPcsv.init_col(25-2, "POPS_Bin04");
    UDPcsv.init_col(26-2, "POPS_Bin05");
    UDPcsv.init_col(27-2, "POPS_Bin06");
    UDPcsv.init_col(28-2, "POPS_Bin07");
    UDPcsv.init_col(29-2, "POPS_Bin08");
    UDPcsv.init_col(30-2, "POPS_Bin09");
    UDPcsv.init_col(31-2, "POPS_Bin10");
    UDPcsv.init_col(32-2, "POPS_Bin11");
    UDPcsv.init_col(33-2, "POPS_Bin12");
    UDPcsv.init_col(34-2, "POPS_Bin13");
    UDPcsv.init_col(35-2, "POPS_Bin14");
    UDPcsv.init_col(36-2, "POPS_Bin15");
    UDPcsv.init_col(37-2, "POPS_Bin16");
  }
%}

TM INITFUNC UDPinit();
/*
depending on (h2o_lya_ppm) {
  lya_stale = 0;
  cur_h2o_lya_ppm = h2o_lya_ppm;
}
*/

/* DPOPS,ISO8601,Status,
 * status:
 *   Is the instrument taking data? If not, what else might it be doing?
 *   Are there important diagnostic channels we would like to see (temps, pressure)?
 *   Are there any scientific products we can report?
 */
depending on (1 Hz) {
  int status;
  status = 1;
  if (POPS_Srvr == 2) status |= 3;
  UDPcsv.set_col(3-2, status);
  UDPcsv.set_col(4-2, text(POPS_Part_num));
  UDPcsv.set_col(5-2, text(POPS_num_cc));
  UDPcsv.set_col(6-2, "");
  UDPcsv.set_col(7-2, text(POPS_Flow));
  UDPcsv.set_col(8-2, text(PMFC_MassFlow));
  UDPcsv.set_col(9-2, text(BMFC_MassFlow));
  UDPcsv.set_col(10-2, text(PMFC_P));
  UDPcsv.set_col(11-2, text(BMFC_P));
  UDPcsv.set_col(12-2, text(BPmpV));
  UDPcsv.set_col(13-2, text(BPmpT));
  UDPcsv.set_col(14-2, text(PPmpT));
  UDPcsv.set_col(15-2, text(POPST));
  UDPcsv.set_col(16-2, text(RPi_T));
  UDPcsv.set_col(17-2, text(Amb_T));
  UDPcsv.set_col(18-2, text(Rov3T));
  UDPcsv.set_col(19-2, text(RingT));
  UDPcsv.set_col(20-2, text(PD_Vel));
  UDPcsv.set_col(21-2, text(PD_nccm));
  UDPcsv.set_col(22-2, text(POPS_Bin01));
  UDPcsv.set_col(23-2, text(POPS_Bin02));
  UDPcsv.set_col(24-2, text(POPS_Bin03));
  UDPcsv.set_col(25-2, text(POPS_Bin04));
  UDPcsv.set_col(26-2, text(POPS_Bin05));
  UDPcsv.set_col(27-2, text(POPS_Bin06));
  UDPcsv.set_col(28-2, text(POPS_Bin07));
  UDPcsv.set_col(29-2, text(POPS_Bin08));
  UDPcsv.set_col(30-2, text(POPS_Bin09));
  UDPcsv.set_col(31-2, text(POPS_Bin10));
  UDPcsv.set_col(32-2, text(POPS_Bin11));
  UDPcsv.set_col(33-2, text(POPS_Bin12));
  UDPcsv.set_col(34-2, text(POPS_Bin13));
  UDPcsv.set_col(35-2, text(POPS_Bin14));
  UDPcsv.set_col(36-2, text(POPS_Bin15));
  UDPcsv.set_col(37-2, text(POPS_Bin16));
  UDPcsv.transmit("DPOPS", dtime());
}
