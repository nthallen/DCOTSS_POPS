%{
  #include "dasio/cmd_writer.h"
%}

# -----------------------------------------------------------------------------
# Partition 1: Main Line
# -----------------------------------------------------------------------------
State Init {
    > Telemetry Start
 +1 > Fail Light Off
 +1 > MFC Bypass Flow Setpoint 0 nccm
    > MFC POPS Flow Setpoint 0 nccm
    > Set LFE PGain 0.0581
    > Set LFE IGain 0.131
    > Set Bypass Pump PGain 8.744e-5
    > Set Bypass Pump IGain 9.000e-5
    depending on (OFF_GROUND) { Validate Startup; }
}

State Startup {
  depending on (ON_GROUND) { Validate Shutdown; }
  Validate POPS_Startup;
  Hold until valid (POPS_Is_Active) or 4:00;
  Validate Bypass_Flow_Iso_Init;
# Validate POPS_Flow_PI_Init;
}

State Shutdown {
      Hold until valid (POPS_Is_Off, POPS_Flow_Off, Bypass_Flow_Off) or 2:00
      else {
        msg(2, "Timed out waiting for POPS, POPS_Flow and Bypass_Flow to shutdown");
      }
  +1  > Fail Light On
      > Quit
}

# -----------------------------------------------------------------------------
# Partition 2: Altitude
# -----------------------------------------------------------------------------
Partition

# This partition converts pressure (altitude) into states 
# (ON_GROUND, OFF_GROUND).
# The threshold pressures each have two values - one for 
# the flight up and the other for the flight down.
# This provides hysteresis and prevents bouncing.  
# Of course we need to ensure that P_ground_up < P_ground_dn,
# which is to say P_ground_up represent a higher altitude.
# We also want to ensure that P_ground_dn is high enough to
# allow the system to shutdown before landing while not being
# so high that it will be triggered during a mid-flight
# altitude scan. 

# convert(HPS_P) is a float value in mbar
#
#
# REF: 650 torr ~867 mbar ~5000 ft
# Palmdale, CA is at elevation 2657'
# Salina, KS is at elevation 1227'

%{ /* Altitude definitions */
    double P_ground_up = 800.;
    double P_ground_dn = 850.;
    int using_swp = 0;
%}

State ON_GROUND {
  { using_swp = 0; }
  { if (using_swp || (convert(HPS_P) > 0 && convert(HPS_P) < P_ground_up))
      Validate OFF_GROUND;
  }
}

State OFF_GROUND {
  { if ((using_swp == SWS_LAND) || (!using_swp && convert(HPS_P) > P_ground_dn)) {
      Validate ON_GROUND;
    }
  }
}

# -----------------------------------------------------------------------------
# Partition 3: POPS
# -----------------------------------------------------------------------------
Partition

State POPS_Idle {
  depending on (Shutdown) { Validate POPS_Shutdown; }
}

State POPS_Startup {
  depending on (Shutdown) { Validate POPS_Shutdown; }
  Validate POPS_Pwr_On;
  Validate POPS_Start;
}

State  POPS_Start {
  depending on (Shutdown) { Validate POPS_Shutdown; }
  Hold Until Valid (POPS_Pwr_Is_Up);
  Hold Until (POPS_Srvr == 2) or 1
  else > POPS Start
  Hold Until (POPS_Srvr == 2 && POPS_Stale == 0) or 10
  else Validate POPS_Comms;
  Validate POPS_Is_Active;
}

State POPS_Comms {
      depending on (Shutdown) { Validate POPS_Shutdown; }
      { msg(2, "POPS did not respond to Start command"); }
      > POPS Shutdown
      Hold Until (POPS_Srvr == 3) or 10;
  +30 Validate POPS_Pwr_Cycle;
      Validate POPS_Start;
}

State POPS_Is_Active {
  depending on (Shutdown) { Validate POPS_Shutdown; }
  { if (POPS_Srvr != 2) {
      msg(MSG_ERROR, "POPS no longer Active, will restart");
      Validate POPS_Start;
    }
  }
}

State POPS_Shutdown {
  Validate POPS_Pwr_Off;
  Hold until valid (POPS_Pwr_Is_Off) or 50;
  Validate POPS_Is_Off;
}

State POPS_Is_Off {}

# -----------------------------------------------------------------------------
# Partition 4: POPS Power
# -----------------------------------------------------------------------------
Partition

State POPS_Pwr_Idle {}

State POPS_Pwr_On {
  > POPS Power On
  Hold Until (POPS_Srvr == 1 || POPS_Srvr == 2) or 2:00
  else Validate POPS_Pwr_Cycle;
  Validate POPS_Pwr_Is_Up;
}

State POPS_Pwr_Cycle {
      > POPS Power Off
  +30 Validate POPS_Pwr_On;
}

State POPS_Pwr_Is_Up {
  { if (POPS_Srvr == 0) {
      msg(MSG_ERROR, "POPS_Pwr: apparently rebooting");
      Validate POPS_Pwr_On;
    }
  }
}

State POPS_Pwr_Off {
  +1  { if (!POPSPwr) Validate POPS_Pwr_Is_Off;
        else if (POPS_Stale > 30 && (POPS_srvr == 0 || POPS_srvr == 3))
          Validate POPS_Pwr_Off1;
      }
  +1  > POPS Shutdown
      Hold Until (POPS_srvr == 3 && POPS_Stale > 3) or 10;
  +30 Validate POPS_Pwr_Off1;
}

State POPS_Pwr_Off1 {
      > POPS Power Off
  +1  Validate POPS_Pwr_Is_Off;
}

State POPS_Pwr_Is_Off {}

# -----------------------------------------------------------------------------
# Partition 5: POPS Flow
# -----------------------------------------------------------------------------
Partition

%{
  double LFE_Set = 800.; // ccm
  double LFE_Gp = 0.0581;  // Proportional Gain
  double LFE_Gi = 0.131;  // Integral Gain
  double LFE_I = 0.;     // Integral
  double LFE_err;
  double LFE_MFset;
  double T0 = 273.15;
  double P0 = 1013.25;   // 1 atm
%}

{ LFE_Gp = LFE_PGain; }
{ LFE_Gi = LFE_IGain; }

State POPS_Flow_Idle {
  depending on (Shutdown) { Validate POPS_Flow_Stop; }
      > Pump POPS Off
  +1  > MFC POPS Flow SetPoint 0 nccm
  { if ( POPS_Srvr == 2) Validate POPS_Flow_PI_Init; }
}

State POPS_Flow_PI_Init {
  { LFE_I = 0.;
    Validate POPS_Flow_PI;
  }
}

State POPS_Flow_PI_Quick_Init {
  { LFE_I = LFE_Set/LFE_Gi;
    Validate POPS_Flow_PI;
  }
}

State POPS_Flow_PI {
  depending on (Shutdown) { Validate POPS_Flow_Stop; }
  depending on (Pumps_Over_Temp) { Validate POPS_Flow_PI_OT; }
  { if (POPS_Srvr != 2) Validate POPS_Flow_Idle; }
  {
    LFE_err = LFE_Set - POPS_ccm;
    LFE_I = LFE_I + LFE_err;
    if (LFE_I*LFE_Gi > 2000) {
      LFE_I = 2000/LFE_Gi;
    } else if (LFE_I < 0) {
      LFE_I = 0;
    }
    LFE_MFset = (LFE_Gi*LFE_I + LFE_Gp*LFE_err)*
      (T0/(RingT+273.15))*(convert(HPS_P)/P0);
    if (LFE_MFset < 10) {
      if (PPmpS) {
        ci_sendfcmd(Cmd_Send, "Pump POPS Off\n");
      }
      if (LFE_MFset < 0) LFE_MFset = 0;
    }
    if (LFE_MFset > 1000) LFE_MFset = 1000; // Alicats limited to 2 SLM
    ci_sendfcmd(Cmd_Send_Quiet,
      "MFC POPS Flow SetPoint %.1lf nccm\n", LFE_MFset*1.75);
    /* ci_sendfcmd(Cmd_Send_Quiet,
      "MFC Sheath Flow SetPoint %.1lf nccm\n", LFE_MFset); */
    if (LFE_MFset > 10 && !PPmpS) {
      ci_sendfcmd(Cmd_Send, "Pump POPS On\n");
    }
  }
}

State POPS_Flow_PI_OT {
      depending on (Shutdown) { Validate POPS_Flow_Stop; }
      > Pump POPS Off
  +1  > MFC POPS Flow SetPoint 0 nccm
      depending on (Pumps_Watch) { Validate POPS_Flow_PI_Init; }
}

State POPS_Flow_Stop {
      > Pump POPS Off
  +1  > MFC POPS Flow SetPoint 0 nccm
      Validate POPS_Flow_Off;
}

State POPS_Flow_Off {}

# -----------------------------------------------------------------------------
# Partition 6: Bypass Flow
# -----------------------------------------------------------------------------
Partition

%{
  double BP_Set = 800.; // ccm
  double BP_Gp = 8.744e-5;  // Proportional Gain
  double BP_Gi = 9.000e-5;  // Integral Gain
  double BP_I = 0.;     // Integral
  double BP_err;
  double BP_MFset;
  int BP_n_update;
  double SPX_ccm = 0.;
%}

{ BP_Gp = BPmp_PGain; }
{ BP_Gi = BPmp_IGain; }

State Bypass_Flow_Idle {
  depending on (Shutdown) { Validate Bypass_Flow_Stop; }
  > MFC Bypass Flow SetPoint 5000 nccm
  > Set Bypass Pump Speed 0 Volts
}

State Bypass_Flow_Iso_Init {
  { BP_I = 0;
    BP_n_update = BPmp_Per-1;
    Validate Bypass_Flow_Iso;
  }
}

State Bypass_Flow_Iso {
      > MFC Bypass Flow SetPoint 5000 nccm
      Hold until (BMFC_Set > 4999) or 3
      else Validate Bypass_Flow_Iso;
   +1 > Pump Bypass On
  
  depending on (Shutdown) { Validate Bypass_Flow_Stop; }
  depending on (Pumps_Over_Temp) { Validate Bypass_Flow_Iso_OT; }
  { double Fm_SPX, Fm_BMFC, Fv_err_BMFC, Vset;
    Fm_SPX = SPX_ccm*(T0/(RingT+273.15))*(convert(HPS_P)/P0);
    Fm_BMFC = PD_nccm - PMFC_MassFlow - Fm_SPX;
    if (Fm_BMFC < 0) Fm_BMFC = 0;
    else if (Fm_BMFC > 5000) Fm_BMFC = 5000;
    
    /* BMFC_MF_LP is BMFC_MassFlow with a low pass filter.
       Fv_err_BMFC is in ccm.
       BP_I is in ccm sec, so BP_Gi is in V/(ccm sec)
       BP_Gp is in V/ccm
     */
    Fv_err_BMFC = (Fm_BMFC - BMFC_MF_LP)*
        ((RingT+273.15)/T0)*(P0/convert(HPS_P));
    BP_I = BP_I + Fv_err_BMFC;
    if (BP_Gi*BP_I >= 5) {
      BP_I = 5/BP_Gi;
    } else if (BP_I < 0) {
      BP_I = 0;
    }
    if (++BP_n_update >= BPmp_Per) {
      Vset = (BP_Gp * Fv_err_BMFC + BP_Gi* BP_I);

      if (Vset < 0) Vset = 0;
      else if (Vset > 5) Vset = 5;  
      ci_sendfcmd(Cmd_Send_Quiet,
        "Set Bypass Pump Speed %.2lf Volts\n", Vset);
      BP_n_update = 0;
    }
  }
}

State Bypass_Flow_ISO_OT {
  depending on (Shutdown) { Validate Bypass_Flow_Stop; }
      > Pump Bypass Off
      > Set Bypass Pump Speed 0 Volts
  +1  > MFC Bypass Flow SetPoint 0 nccm
      depending on (Pumps_Watch) { Validate Bypass_Flow_Iso_Init; }
}

State Bypass_Flow_Stop {
      > Pump Bypass Off
      > Set Bypass Pump Speed 0 Volts
  +1  > MFC Bypass Flow SetPoint 0 nccm
      Validate Bypass_Flow_Off;
}

State Bypass_Flow_Off {}

# -----------------------------------------------------------------------------
# Partition 7: Pump Watchdog
# -----------------------------------------------------------------------------
Partition

State Pumps_Watch NoLog {
  Hold until (convert(PPmpT) > 80 || convert(BPmpT) > 80);
  Hold until (convert(PPmpT) < 80 && convert(BPmpT) < 80) or 5
  else {
    msg(MSG_ERROR, "Pumps over temperature: PPmpT: %.1lf C  BPmpT: %.1lf C",
                    convert(PPmpT), convert(BPmpT));
    Validate Pumps_Over_Temp;
  }
  Validate Pumps_Watch;
}

State Pumps_Over_Temp NoLog {
  Hold until (convert(PPmpT) < 50 && convert(BPmpT) < 50);
  Hold until (convert(PPmpT) > 50 || convert(BPmpT) > 50) or 5
  else Validate Pumps_Watch;
  Validate Pumps_Over_Temp;
}

# -----------------------------------------------------------------------------
# Partition 8: Mini-Moudi
# -----------------------------------------------------------------------------
Partition

%{
  /* The P_moudi_low values define the low altitude/high pressure range for
     mini-moudi sampling.
     P_moudi_high values define the high altitude/low pressure range, if
     applicable.
     The _op values define a range within which we will open the valve.
     The _cl values define a range outside of which we will close the valve.
     The _op range should be entirely within in the _cl range with enough
     margin to avoid rapid cycling.
     All P_moudi values are in mbar, to match HPS_P.
  */
  #define P_moudi_low_op    140.
  #define P_moudi_low_cl    145.
  
  int moudi_open(double P) {
    #ifdef P_moudi_high_op
      return P <= P_moudi_low_op && P >= P_moudi_high_op;
    #else
      return P <= P_moudi_low_op;
    #endif
  }
  
  int moudi_close(double P) {
    #ifdef P_moudi_high_op
      return P > P_moudi_low_cl || P < P_moudi_high_cl;
    #else
      return P > P_moudi_low_cl;
    #endif
  }
%}

State Moudi_closed {
  > Moudi Valve off
  { if (moudi_open(convert(HPS_P))) Validate Moudi_opened; }
}

State Moudi_opened {
  > Moudi Valve On
  { if (moudi_close(convert(HPS_P))) Validate Moudi_closed; }
}
